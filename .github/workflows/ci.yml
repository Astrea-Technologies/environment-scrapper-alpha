name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy
          pip install -r backend/requirements.txt
      - name: Lint with ruff
        run: |
          cd backend
          ruff check .
      - name: Format with black
        run: |
          cd backend
          black --check .
      - name: Type check with mypy
        run: |
          cd backend
          mypy .

  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongodb:
        image: mongo:6
        env:
          MONGO_INITDB_ROOT_USERNAME: mongo
          MONGO_INITDB_ROOT_PASSWORD: mongo
        ports:
          - 27017:27017
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r backend/requirements.txt
      - name: Test with pytest
        run: |
          cd backend
          pytest --cov=app
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          MONGODB_URL: mongodb://mongo:mongo@localhost:27017/
          REDIS_URL: redis://localhost:6379/0

  frontend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Lint with ESLint
        run: |
          cd frontend
          npm run lint
      - name: Check formatting with Prettier
        run: |
          cd frontend
          npx prettier --check "src/**/*.{ts,tsx}"
      - name: Type check with TypeScript
        run: |
          cd frontend
          npx tsc --noEmit

  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Run tests
        run: |
          cd frontend
          npm test

  build:
    runs-on: ubuntu-latest
    needs: [backend-lint, backend-test, frontend-lint, frontend-test]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          tags: political-analysis-backend:latest
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: false
          tags: political-analysis-frontend:latest
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max 