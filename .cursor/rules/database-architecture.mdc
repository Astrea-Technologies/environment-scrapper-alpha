---
description: Hybrid Database Architecture Specification for the Political Social Media Analysis Platform.
globs: 
alwaysApply: false
---
# Hybrid Database Architecture

## 1. Database Technologies

| Component | Technology | Version | Purpose | MVP Status |
|-----|---|---|---|---|
| Relational Database | PostgreSQL | 13+ | Entity data and relationships | ✅ Included |
| Document Database | MongoDB | 6.0+ | Social media content and engagement | ✅ Included |
| In-memory Database | Redis | 7.0+ | Caching and real-time operations | ❌ **NOT in MVP** |
| Vector Database | Pinecone | Latest | Semantic similarity analysis | ✅ Included |

## 2. Relational Database Design

### 2.1 Primary Technology

PostgreSQL with SQLModel ORM integration

### 2.2 Key Design Decisions

- **UUID Primary Keys**: All entities use UUID primary keys for security and distributed system compatibility
- **Relationship Management**: Proper foreign key constraints with cascade delete
- **String Field Constraints**: Appropriate length limits on all VARCHAR fields
- **Migration Strategy**: Alembic for version-controlled schema changes

### 2.3 Domain Models

```python
class PoliticalEntity(SQLModel, table=True):
    id: UUID = Field(default_factory=uuid4, primary_key=True)
    name: str = Field(index=True)
    entity_type: str  # politician, party, organization
    platforms: List["SocialMediaAccount"] = Relationship(back_populates="entity")
    relationships: List["EntityRelationship"] = Relationship(back_populates="source_entity")

class SocialMediaAccount(SQLModel, table=True):
    id: UUID = Field(default_factory=uuid4, primary_key=True)
    platform: str  # twitter, facebook, instagram, etc.
    platform_id: str = Field(index=True)  # platform-specific identifier
    handle: str
    entity_id: UUID = Field(foreign_key="politicalentity.id")
    entity: PoliticalEntity = Relationship(back_populates="platforms")

class EntityRelationship(SQLModel, table=True):
    id: UUID = Field(default_factory=uuid4, primary_key=True)
    source_entity_id: UUID = Field(foreign_key="politicalentity.id")
    target_entity_id: UUID = Field(foreign_key="politicalentity.id")
    relationship_type: str  # ally, opponent, neutral
    strength: float  # normalized relationship strength
    last_updated: datetime = Field(default_factory=datetime.utcnow)
    source_entity: PoliticalEntity = Relationship(back_populates="relationships")
```

## 3. Document Database Design

### 3.1 Primary Technology

MongoDB for flexible document storage and querying

### 3.2 Key Collections

- **posts**: Social media posts from tracked accounts
- **comments**: User comments on tracked posts
- **metrics**: Aggregated engagement statistics
- **topics**: Topic analysis results and trends

### 3.3 Schema Patterns

**Post Document Example:**
```javascript
{
  "_id": ObjectId,
  "platform_id": String,        // Original ID from the platform
  "platform": String,           // instagram, twitter, facebook, etc.
  "account_id": String,         // Reference to PostgreSQL SocialMediaAccount.id
  "content_type": String,       // post, sidecar, video, story, reel, etc.
  "short_code": String,         // Platform shortcode for URL (e.g., Instagram)
  "url": String,                // Direct URL to the post
  "content": {
    "text": String,
    "media": Array,             // URLs to media content
    "links": Array,             // External links
    "hashtags": Array,          // Hashtags used in the post
    "mentions": Array           // Accounts mentioned in the post
  },
  "metadata": {
    "created_at": Date,
    "language": String,
    "location": {
      "name": String,
      "id": String,
      "country": String,
      "state": String,
      "city": String
    },
    "client": String,
    "is_repost": Boolean,
    "is_reply": Boolean,
    "dimensions": {
      "height": Number,
      "width": Number
    },
    "alt_text": String,
    "product_type": String,     // For videos: clips, igtv, etc.
    "owner": {
      "username": String,
      "id": String,
      "verified": Boolean
    },
    "tagged_users": Array       // Users tagged in the post
  },
  "engagement": {
    "likes_count": Number,
    "shares_count": Number,
    "comments_count": Number,
    "views_count": Number,
    "engagement_rate": Number,
    "saves_count": Number
  },
  "child_posts": Array,         // For sidecar/carousel posts with child items
  "video_data": {               // Present for video posts
    "duration": Number,
    "video_url": String,
    "thumbnail_url": String,
    "is_muted": Boolean
  },
  "analysis": {
    "sentiment_score": Number,
    "topics": Array,
    "entities_mentioned": Array,
    "key_phrases": Array,
    "emotional_tone": String
  },
  "vector_id": String           // Reference to vector database entry
}
```

**Comment Document Example:**
```javascript
{
  "_id": ObjectId,
  "platform_id": String,       // Original ID from the platform
  "platform": String,          // twitter, facebook, etc.
  "post_id": String,           // Reference to MongoDB post ID
  "user_id": String,           // User ID from the platform
  "user_name": String,         // User name from the platform
  "content": {
    "text": String,
    "media": Array,            // Optional media attachments
    "mentions": Array          // User mentions in the comment
  },
  "metadata": {
    "created_at": Date,
    "language": String,
    "location": Object         // Optional location data
  },
  "engagement": {
    "likes_count": Number,
    "replies_count": Number
  },
  "analysis": {
    "sentiment_score": Number,
    "emotional_tone": String,
    "toxicity_flag": Boolean,
    "entities_mentioned": Array
  },
  "vector_id": String          // Reference to vector database entry
}
```

### 3.4 Indexing Strategy

- Compound index on `platform` and `account_id`
- Compound index on `metadata.created_at` and `account_id`
- Text index on `content.text` for content search
- Single field indexes on `engagement` metrics
- Index on `short_code` for quick URL lookups
- Index on `platform_id` for platform-specific queries

## 4. In-memory Database Design (NOT in MVP)

### 4.1 Primary Technology

Redis for caching, real-time metrics and messaging - **NOT IMPLEMENTED IN MVP**

### 4.2 MVP Alternative

In the MVP version, the application will:
- Use application-level caching where necessary
- Store metrics directly in MongoDB
- Use the TaskManager system for basic message processing
- Defer real-time notifications to future releases

### 4.3 Post-MVP Implementation

The following Redis features will be implemented after the MVP:

- **Hash maps**: Entity and post metrics (`entity:{id}:metrics`)
- **Sorted sets**: Trending topics and influencers (`trending:topics:{timeframe}`)
- **Lists**: Recent activity streams (`activity:entity:{id}`)
- **Pub/Sub channels**: Real-time alerts and notifications

### 4.4 Caching Strategy (Post-MVP)

- Time-based expiration for volatile metrics
- LRU eviction policy for cached data
- Write-through cache for critical metrics

## 5. Vector Database Design

### 5.1 Primary Technology

Pinecone or similar vector database for semantic similarity analysis

### 5.2 Embedding Strategy

- Text embeddings using sentence-transformers
- 1536-dimension vectors for high-fidelity similarity
- Namespaces separated by content type
- Metadata filtering for efficient queries

### 5.3 Vector Schema

```javascript
{
  "id": String,           // Unique identifier
  "values": Array,        // Embedding vector
  "metadata": {
    "content_type": String, // post, comment
    "source_id": String,    // MongoDB ID of source content
    "entity_id": String,    // PostgreSQL ID of political entity
    "platform": String,
    "created_at": Date,
    "topics": Array,
    "sentiment_score": Number
  }
}
```

## 6. Cross-Database Integration

### 6.1 Reference Patterns

- PostgreSQL → MongoDB: UUID references stored as strings
- MongoDB → Vector DB: Document IDs linked to vector entries
- All DBs → Redis: **Not applicable in MVP** (will be implemented post-MVP)

### 6.2 Synchronization Strategy (MVP Version)

- PostgreSQL as the source of truth for entity data
- MongoDB used for document storage
- Task-based processing for updates between systems
- Direct connections between databases in the MVP

### 6.3 Post-MVP Synchronization

- MongoDB change streams for data propagation
- Redis as intermediary for real-time updates
- Periodic reconciliation for data consistency

### 6.4 Transaction Management

- Two-phase commit for critical cross-database operations
- Eventual consistency model for non-critical updates
- Compensating transactions for error recovery

## 7. Performance Optimization

### 7.1 Query Optimization

- Direct database queries for frequent operations in MVP
- Application-level caching for repetitive queries
- Query result caching with Redis (post-MVP)

### 7.2 Sharding Strategy (Post-MVP)

- MongoDB sharded by entity and time period
- Vector database partitioned by content domains
- Redis cluster for horizontal scaling

### 7.3 Connection Pooling

- Optimized connection pools for each database
- Connection reuse across related operations
- Graceful handling of connection failures 