---
description: Hybrid Database Architecture Specification for the Political Social Media Analysis Platform.
globs: 
alwaysApply: false
---
# Hybrid Database Architecture

## 1. Database Technologies

| Component | Technology | Version | Purpose | MVP Status |
|-----|---|---|---|---|
| Relational Database | PostgreSQL | 13+ | Entity data and relationships | ✅ Included |
| Document Database | MongoDB | 6.0+ | Social media content and engagement | ✅ Included |
| In-memory Database | Redis | 7.0+ | Caching and real-time operations | ❌ **NOT in MVP** |
| Vector Database | Pinecone | Latest | Semantic content analysis | ✅ Included |

## 2. Relational Database Design (PostgreSQL)

### 2.1 Primary Technology

PostgreSQL with SQLModel ORM integration.

### 2.2 Key Design Decisions

- **UUID Primary Keys**: All entities use UUID primary keys for security and distributed system compatibility.
- **Relationship Management**: Proper foreign key constraints with cascade delete (`ondelete="CASCADE"` in models).
- **String Field Constraints**: Appropriate length limits on VARCHAR fields (e.g., `max_length=255`).
- **Migration Strategy**: Alembic for version-controlled schema changes.

### 2.3 Domain Models (SQLModel)

The SQLModel definitions are located in individual files within the `backend/app/db/models/` directory.

**`backend/app/db/models/political_entity.py`:**
```python
import uuid
from datetime import datetime
from enum import Enum
from typing import TYPE_CHECKING, List, Optional

from sqlmodel import Field, Relationship, SQLModel

if TYPE_CHECKING:
    from app.db.models.social_media_account import SocialMediaAccount
    from app.db.models.entity_relationship import EntityRelationship


class EntityType(str, Enum):
    POLITICIAN = "politician"
    PARTY = "party"
    ORGANIZATION = "organization"


class PoliticalEntity(SQLModel, table=True):
    """
    PoliticalEntity model for database storage.
    
    This model represents a political entity (politician, party, organization) 
    in the system and is stored in PostgreSQL.
    """
    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)
    name: str = Field(index=True, max_length=255)
    entity_type: EntityType
    description: Optional[str] = Field(default=None)
    country: Optional[str] = Field(default=None, max_length=100)
    region: Optional[str] = Field(default=None, max_length=100)
    political_alignment: Optional[str] = Field(default=None, max_length=100)
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)

    # Relationships
    social_media_accounts: List["SocialMediaAccount"] = Relationship(
        back_populates="political_entity",
        sa_relationship_kwargs={"cascade": "all, delete-orphan"},
    )
    
    # Relationships for EntityRelationship
    source_relationships: List["EntityRelationship"] = Relationship(
        back_populates="source_entity",
        sa_relationship_kwargs={
            "primaryjoin": "PoliticalEntity.id==EntityRelationship.source_entity_id",
            "cascade": "all, delete-orphan",
        },
    )
    
    target_relationships: List["EntityRelationship"] = Relationship(
        back_populates="target_entity",
        sa_relationship_kwargs={
            "primaryjoin": "PoliticalEntity.id==EntityRelationship.target_entity_id",
            "cascade": "all, delete",
        },
    ) 
```

**`backend/app/db/models/social_media_account.py`:**
```python
import uuid
from enum import Enum
from typing import Optional

from sqlmodel import Field, Relationship, SQLModel

from app.db.models.political_entity import PoliticalEntity


class Platform(str, Enum):
    TWITTER = "twitter"
    FACEBOOK = "facebook"
    INSTAGRAM = "instagram"
    LINKEDIN = "linkedin"
    YOUTUBE = "youtube"
    TIKTOK = "tiktok"
    OTHER = "other"


class SocialMediaAccount(SQLModel, table=True):
    """
    SocialMediaAccount model for database storage.
    
    This model represents a social media account linked to a political entity
    and is stored in PostgreSQL.
    """
    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)
    platform: Platform
    platform_id: str = Field(index=True, max_length=255)
    handle: str = Field(max_length=255)
    name: Optional[str] = Field(default=None, max_length=255)
    url: Optional[str] = Field(default=None, max_length=2083)
    verified: bool = Field(default=False)
    follower_count: Optional[int] = Field(default=None)
    following_count: Optional[int] = Field(default=None)
    
    # Foreign key
    political_entity_id: uuid.UUID = Field(
        foreign_key="politicalentity.id",
        nullable=False,
        ondelete="CASCADE"
    )
    
    # Relationship
    political_entity: PoliticalEntity = Relationship(back_populates="social_media_accounts") 
```

**`backend/app/db/models/entity_relationship.py`:**
```python
import uuid
from datetime import datetime
from enum import Enum
from typing import Optional

from sqlmodel import Field, Relationship, SQLModel

from app.db.models.political_entity import PoliticalEntity


class RelationshipType(str, Enum):
    ALLY = "ally"
    OPPONENT = "opponent"
    NEUTRAL = "neutral"


class EntityRelationship(SQLModel, table=True):
    """
    EntityRelationship model for database storage.
    
    This model represents a relationship between two political entities
    and is stored in PostgreSQL.
    """
    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)
    relationship_type: RelationshipType
    strength: float = Field(default=0.5, ge=0.0, le=1.0)
    last_updated: datetime = Field(default_factory=datetime.utcnow)
    
    # Foreign keys
    source_entity_id: uuid.UUID = Field(
        foreign_key="politicalentity.id",
        nullable=False,
        ondelete="CASCADE"
    )
    target_entity_id: uuid.UUID = Field(
        foreign_key="politicalentity.id",
        nullable=False,
        ondelete="CASCADE"
    )
    
    # Relationships
    source_entity: PoliticalEntity = Relationship(
        back_populates="source_relationships",
        sa_relationship_kwargs={"foreign_keys": "EntityRelationship.source_entity_id"}
    )
    target_entity: PoliticalEntity = Relationship(
        back_populates="target_relationships",
        sa_relationship_kwargs={"foreign_keys": "EntityRelationship.target_entity_id"}
    ) 
```

## 3. Document Database Design (MongoDB)

### 3.1 Primary Technology

MongoDB for flexible document storage and querying. Asynchronous access via `motor`.

### 3.2 Key Collections

- **posts**: Social media posts from tracked accounts (`SocialMediaPost` schema).
- **comments**: User comments on tracked posts (`SocialMediaComment` schema).
- **topics**: Topic definitions and metadata (`TopicAnalysis` schema).
- **topic_occurrences**: Instances where topics are detected in content (`TopicOccurrence` schema).
- **topic_trends**: Aggregated topic analysis over time (`TopicTrend` schema).
- **metrics**: (Potentially) Aggregated engagement statistics (Schema TBD or integrated into other collections).

### 3.3 Schema Definitions (Pydantic)

The Pydantic models defining the structure for MongoDB documents are located in:
`backend/app/db/schemas/mongodb.py`

Key schemas include:

**`SocialMediaPost`:**
```python
class SocialMediaPost(BaseModel):
    """
    Schema for social media posts stored in MongoDB.
    
    This model represents a post from various social media platforms
    including its content, metadata, engagement metrics, and analysis.
    """
    platform_id: str = Field(..., description="Original ID from the social media platform")
    platform: str = Field(..., description="Social media platform name (e.g., twitter, facebook)")
    account_id: UUID = Field(..., description="Reference to PostgreSQL SocialMediaAccount UUID")
    content_type: str = Field(..., description="Type of post (e.g., post, sidecar, video)")
    short_code: Optional[str] = Field(None, description="Platform shortcode for URL (e.g., Instagram)")
    url: Optional[HttpUrl] = Field(None, description="Direct URL to the post")
    
    content: PostContent  # Defined in mongodb.py
    metadata: PostMetadata # Defined in mongodb.py
    engagement: PostEngagement # Defined in mongodb.py
    analysis: Optional[PostAnalysis] = None # Defined in mongodb.py
    child_posts: Optional[List[ChildPost]] = None # Defined in mongodb.py
    video_data: Optional[VideoData] = None # Defined in mongodb.py
    vector_id: Optional[str] = Field(None, description="Reference to vector database entry")
    
    # Note: _id is handled implicitly by MongoDB/Motor or via repository layer
    class Config:
        schema_extra = { ... } # Example included in mongodb.py
```

**`SocialMediaComment`:**
```python
class SocialMediaComment(BaseModel):
    """
    Schema for social media comments stored in MongoDB.
    
    This model represents a comment on a social media post including
    its content, metadata, engagement metrics, replies, and analysis.
    """
    platform_id: str = Field(..., description="Original ID from the social media platform")
    platform: str = Field(..., description="Social media platform name (e.g., twitter, facebook)")
    post_id: str = Field(..., description="Reference to MongoDB post ID")
    post_url: Optional[HttpUrl] = Field(None, description="URL of the original post")
    
    user_id: str = Field(..., description="ID of the commenter")
    user_name: str = Field(..., description="Username of the commenter")
    user_full_name: Optional[str] = Field(None, description="Full display name of the commenter")
    user_profile_pic: Optional[HttpUrl] = Field(None, description="Profile picture URL of the commenter")
    user_verified: bool = Field(False, description="Whether the user has a verification badge")
    user_private: bool = Field(False, description="Whether the user's account is private")
    
    content: CommentContent # Defined in mongodb.py
    metadata: CommentMetadata # Defined in mongodb.py
    engagement: CommentEngagement # Defined in mongodb.py
    
    replies: List[CommentReply] = [] # Defined in mongodb.py
    
    analysis: Optional[CommentAnalysis] = None # Defined in mongodb.py
    user_details: Optional[CommentUserDetails] = None # Defined in mongodb.py
    vector_id: Optional[str] = Field(None, description="Reference to vector database entry")

    # Note: _id is handled implicitly by MongoDB/Motor or via repository layer
    class Config:
        schema_extra = { ... } # Example included in mongodb.py
```

**`TopicAnalysis`:**
```python
class TopicAnalysis(BaseModel):
    """
    Schema for topic analysis data stored in MongoDB.
    
    This model represents a topic that can be analyzed across social media content,
    including its definition, related keywords, and categorization.
    """
    topic_id: str = Field(..., description="Unique identifier for the topic")
    name: str = Field(..., description="Descriptive name of the topic")
    keywords: List[str] = Field(..., description="List of related keywords or phrases")
    description: Optional[str] = Field(None, description="Optional explanation of the topic")
    category: str = Field(..., description="Broader category the topic belongs to (e.g., Economy, Healthcare)")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp when the topic was created")
    updated_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp when the topic was last updated")

    # Note: _id is handled implicitly by MongoDB/Motor or via repository layer
    class Config:
        schema_extra = { ... } # Example included in mongodb.py
```

**(Other schemas like `TopicOccurrence`, `TopicTrend`, and nested sub-models are also defined in `mongodb.py`)**

### 3.4 Indexing Strategy

*(This section remains largely conceptual and should guide index creation)*
- **posts collection:**
    - Compound index on `platform` and `account_id`
    - Compound index on `metadata.created_at` and `account_id`
    - Text index on `content.text` for content search
    - Index on `platform_id` (unique potentially)
    - Index on `short_code`
    - Consider indexes on frequently queried `engagement` fields.
- **comments collection:**
    - Compound index on `platform` and `post_id`
    - Index on `platform_id` (unique potentially)
    - Index on `user_id`
    - Compound index on `metadata.created_at` and `post_id`
- **topics collection:**
    - Index on `topic_id` (unique)
    - Index on `name`
    - Index on `category`
- **topic_occurrences collection:**
    - Compound index on `topic_id` and `content_id`
    - Compound index on `topic_id` and `detected_at`
- **topic_trends collection:**
    - Compound index on `topic_id`, `time_period`, `start_date`

*(Actual indexes should be managed via Motor/PyMongo commands or an ODM like Beanie if adopted later)*

## 4. In-memory Database Design (Redis - NOT in MVP)

### 4.1 Primary Technology

Redis for caching, real-time metrics and messaging - **NOT IMPLEMENTED IN MVP**

### 4.2 MVP Alternative

In the MVP version, the application will:
- Use application-level caching where necessary (e.g., in-memory dicts, potentially FastAPI Cache).
- Store metrics directly in MongoDB.
- Use the simple TaskManager system for background tasks.
- Defer real-time notifications to future releases.

### 4.3 Post-MVP Implementation

The following Redis features will be implemented after the MVP:
- **Hash maps**: Entity and post metrics (`entity:{id}:metrics`)
- **Sorted sets**: Trending topics and influencers (`trending:topics:{timeframe}`)
- **Lists**: Recent activity streams (`activity:entity:{id}`)
- **Pub/Sub channels**: Real-time alerts and notifications

### 4.4 Caching Strategy (Post-MVP)

- Time-based expiration for volatile metrics.
- LRU eviction policy for cached data.
- Write-through cache for critical metrics.

## 5. Vector Database Design (Pinecone)

### 5.1 Primary Technology

Pinecone for semantic similarity analysis. Connection managed via `pinecone-client`.

### 5.2 Embedding Strategy

- Text embeddings generated (e.g., using `sentence-transformers`).
- Vector dimensionality depends on the chosen embedding model.
- Namespaces likely separated by content type (e.g., `posts`, `comments`).
- Metadata stored alongside vectors for filtering.

### 5.3 Vector Schema (Conceptual)

```javascript
{
  "id": String,           // Unique identifier (e.g., MongoDB document platform_id)
  "values": Array,        // Embedding vector (e.g., [0.1, 0.2, ...])
  "metadata": {
    "content_type": String, // "post" or "comment"
    "source_id": String,    // MongoDB document platform_id
    "account_id": String,   // PostgreSQL SocialMediaAccount UUID (as string)
    "entity_id": String,    // PostgreSQL PoliticalEntity UUID (as string)
    "platform": String,     // e.g., "twitter", "instagram"
    "created_at": ISODate,  // Timestamp of original content
    "topics": Array,        // List of associated topic IDs/labels
    "sentiment_score": Number // Sentiment of the source content
    // Add other filterable metadata as needed
  }
}
```
*(Actual interaction via `pinecone-client` library)*

## 6. Cross-Database Integration

### 6.1 Reference Patterns

- **PostgreSQL → MongoDB**: UUIDs from PostgreSQL (`PoliticalEntity.id`, `SocialMediaAccount.id`) are stored as strings within relevant MongoDB documents (e.g., `SocialMediaPost.account_id`).
- **MongoDB → Vector DB**: The `platform_id` (or potentially MongoDB's `_id` as string) of posts/comments is used as the vector `id` in Pinecone. The `vector_id` field in MongoDB schemas stores this Pinecone ID.
- **All DBs → Redis**: **Not applicable in MVP**. (Post-MVP: Relevant IDs will be used as keys in Redis).

### 6.2 Synchronization Strategy (MVP Version)

- PostgreSQL is the source of truth for entity and account data.
- MongoDB stores the collected social media content.
- Relationships are established during data ingestion/processing (e.g., when a post is saved, its `account_id` links it to the PostgreSQL `SocialMediaAccount`).
- Updates requiring cross-database consistency rely on application logic (e.g., updating entity info might trigger reprocessing of related content if necessary).

### 6.3 Post-MVP Synchronization

- Explore MongoDB change streams or event-driven patterns for propagating updates (e.g., entity name change triggers updates in related analysis).
- Use Redis Pub/Sub or a message queue (like RabbitMQ with Celery) for inter-service communication if the application becomes more distributed.

### 6.4 Transaction Management

- Standard database transactions used within single database operations (PostgreSQL commit/rollback, MongoDB atomic operations).
- Cross-database operations in MVP are typically not transactional. Design for eventual consistency or use compensating actions in application logic if failures occur mid-process.
- Post-MVP: Consider two-phase commit patterns or Saga pattern for critical cross-database workflows if required.

## 7. Performance Optimization

### 7.1 Query Optimization

- Leverage database indexes effectively (see section 3.4).
- Write efficient queries in repository layers.
- Use projection in MongoDB to fetch only necessary fields.
- Implement pagination for all list endpoints.
- Application-level caching for frequently accessed, rarely changing data.

### 7.2 Sharding Strategy (Post-MVP)

- Consider sharding MongoDB collections based on high-cardinality keys like `account_id` or time ranges if data volume grows significantly.
- Vector database partitioning/sharding handled by the service provider (Pinecone).

### 7.3 Connection Pooling

- Rely on connection pooling provided by database drivers (`psycopg` for SQLModel/PostgreSQL, `motor` for MongoDB).
- Ensure pool sizes are configured appropriately based on expected load and application concurrency (e.g., FastAPI worker count). 