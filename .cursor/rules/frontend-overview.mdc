---
description: General description of the frontend used in the repository. Use this to have more context on the /frontend structure.
globs: frontend, *.tsx, *.ts
alwaysApply: false
---
# frontend-rule

## Project Overview
This frontend project is built with:
- [Vite](mdc:https:/vitejs.dev) as the build tool and dev server
- [React](mdc:https:/reactjs.org) as the UI library
- [TypeScript](mdc:https:/www.typescriptlang.org) for type safety
- [TanStack Query](mdc:https:/tanstack.com/query) for API data fetching and caching
- [TanStack Router](mdc:https:/tanstack.com/router) for routing
- [Chakra UI](mdc:https:/chakra-ui.com) for component library and styling

## Project Structure
- `/src` - Main frontend code
  - `/assets` - Static assets
  - `/client` - Auto-generated OpenAPI client
  - `/components` - Reusable React components
  - `/hooks` - Custom React hooks
  - `/routes` - Application routes and pages
- `/public` - Static files served directly
- `/tests` - End-to-end tests with Playwright

## API Integration
- The OpenAPI client is auto-generated from the backend schema
- API services are available in `/src/client/sdk.gen.ts`
- Types are defined in `/src/client/types.gen.ts`
- Use the `npm run generate-client` script to update the client

## Development Workflow
- Use `npm run dev` for local development
- The backend API URL can be configured via `VITE_API_URL` environment variable
- Code formatting and linting is handled by Biome

## Testing
- End-to-end testing with Playwright
- Test files are in the `/tests` directory
- Run tests with `npx playwright test`

## Docker Support
- Production build uses multi-stage Docker build
- Nginx serves the static files in production
- Configuration in `Dockerfile` and `nginx.conf`

## Key Files
- `vite.config.ts` - Vite configuration
- `package.json` - Dependencies and scripts
- `tsconfig.json` - TypeScript configuration
- `biome.json` - Code formatting and linting rules
- `openapi-ts.config.ts` - API client generation configuration