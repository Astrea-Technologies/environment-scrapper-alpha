---
description: Server architectur of the project.
globs: 
alwaysApply: false
---
# Server Architecture (MVP and Future Implementation)

## 1. System Overview

The Political Social Media Analysis Platform follows a modern, containerized architecture designed for scalability, resilience, and maintainable development. This document outlines both the MVP system architecture and the target future implementation.

### 1.1 MVP Architecture

```
┌───────────────────────┐     ┌───────────────────────┐
│                       │     │                       │
│  Frontend (React/TS)  │◄────┤  Backend (FastAPI)    │
│                       │     │                       │
└───────────────────────┘     └───────────┬───────────┘
                                          │
                                          ▼
┌───────────────────────┐     ┌───────────────────────┐
│  Database Layer       │     │  Task Processing      │
│                       │     │  (MVP Version)        │
│  ┌─────────────────┐  │     │                       │
│  │  PostgreSQL     │  │     │  ┌─────────────────┐  │
│  │  (Relational)   │  │     │  │  FastAPI        │  │
│  └─────────────────┘  │     │  │  BackgroundTasks│  │
│                       │     │  └─────────────────┘  │
│  ┌─────────────────┐  │     │                       │
│  │  MongoDB        │  │     │  ┌─────────────────┐  │
│  │  (Document)     │  │     │  │  In-Memory      │  │
│  └─────────────────┘  │     │  │  TaskManager    │  │
│  ┌─────────────────┐  │     │  └─────────────────┘  │
│  │  Pinecone       │  │     │                       │
│  │  (Vector)       │  │     └───────────────────────┘
│  └─────────────────┘  │     
│                       │     
└───────────────────────┘     
```

### 1.2 Future Architecture (Post-MVP)

```
┌───────────────────────┐     ┌───────────────────────┐
│                       │     │                       │
│  Frontend (React/TS)  │◄────┤  Backend (FastAPI)    │
│                       │     │                       │
└───────────────────────┘     └───────────┬───────────┘
                                          │
                                          ▼
┌───────────────────────┐     ┌───────────────────────┐
│  Database Layer       │     │  Task Processing      │
│                       │     │                       │
│  ┌─────────────────┐  │     │  ┌─────────────────┐  │
│  │  PostgreSQL     │  │     │  │  Celery Worker  │  │
│  │  (Relational)   │  │     │  │  (Tasks)        │  │
│  └─────────────────┘  │     │  └─────────────────┘  │
│                       │     │                       │
│  ┌─────────────────┐  │     │  ┌─────────────────┐  │
│  │  MongoDB        │  │     │  │  Celery Beat    │  │
│  │  (Document)     │  │     │  │  (Scheduling)   │  │
│  └─────────────────┘  │     │  └─────────────────┘  │
│                       │     │                       │
│  ┌─────────────────┐  │     │  ┌─────────────────┐  │
│  │  Redis          │  │     │  │  RabbitMQ       │  │
│  │  (Cache)        │  │     │  │  (Message Queue)│  │
│  └─────────────────┘  │     │  └─────────────────┘  │
│                       │     │                       │
│  ┌─────────────────┐  │     │  ┌─────────────────┐  │
│  │  Pinecone       │  │     │  │  Kafka          │  │
│  │  (Vector)       │  │     │  │  (Streaming)    │  │
│  └─────────────────┘  │     │  └─────────────────┘  │
│                       │     │                       │
└───────────────────────┘     └───────────────────────┘
```

## 2. Containerization Strategy

### 2.1 Docker Compose Architecture (MVP)

The MVP system uses Docker Compose with a simplified service structure:

| File | Purpose | Usage |
|---|---|----|
| `docker-compose.yml` | Production-ready base configuration | Primary service definitions |
| `docker-compose.override.yml` | Development environment customizations | Automatically merged during development |

### 2.2 Service Organization (MVP)

Services included in the MVP:

1. **Frontend Services**
   - React frontend application

2. **Backend Services**
   - FastAPI application
   - Prestart initialization service

3. **Database Services**
   - PostgreSQL (relational data)
   - MongoDB (document data)
   - Pinecone (vector embeddings)

4. **Development Tools**
   - Adminer (PostgreSQL management)
   - MongoDB Express (MongoDB management)
   - Traefik Proxy (API gateway)
   - Mailcatcher (email testing)

### 2.3 Future Services (Post-MVP)

These services will be added after the MVP phase:

1. **Message Processing**
   - RabbitMQ (message broker)
   - Celery Worker (task execution)
   - Celery Beat (task scheduling)
   - Celery Flower (task monitoring)

2. **Caching**
   - Redis (caching and real-time operations)

3. **Stream Processing**
   - Kafka (event streaming)
   - Zookeeper (Kafka coordination)

## 3. Network Architecture

### 3.1 Network Configuration (MVP)

```
┌─────────────────────────────────────────────────────────────┐
│                      traefik-public                          │
│                                                             │
│  ┌─────────┐   ┌─────────┐   ┌─────────┐   ┌─────────┐      │
│  │ Traefik │   │ Frontend│   │ Backend │   │ Adminer │      │
│  └─────────┘   └─────────┘   └─────────┘   └─────────┘      │
│                                                             │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│                        default                              │
│                                                             │
│  ┌─────────┐   ┌─────────┐                                  │
│  │PostgreSQL│   │ MongoDB │                                  │
│  └─────────┘   └─────────┘                                  │
│                                                             │
└─────────────────────────────────────────────────────────────┘
```

### 3.2 Future Network Configuration (Post-MVP)

The full network configuration will add these additional services:

```
┌─────────────────────────────────────────────────────────────┐
│                        default                              │
│                                                             │
│  ┌─────────┐   ┌─────────┐   ┌─────────┐   ┌─────────┐      │
│  │PostgreSQL│   │ MongoDB │   │  Redis  │   │RabbitMQ │      │
│  └─────────┘   └─────────┘   └─────────┘   └─────────┘      │
│                                                             │
│  ┌─────────┐   ┌─────────┐   ┌─────────┐   ┌─────────┐      │
│  │  Kafka  │   │Zookeeper│   │ Celery  │   │ Celery  │      │
│  │         │   │         │   │ Worker  │   │  Beat   │      │
│  └─────────┘   └─────────┘   └─────────┘   └─────────┘      │
│                                                             │
└─────────────────────────────────────────────────────────────┘
```

## 4. Data Architecture

### 4.1 Hybrid Database Strategy (MVP)

The MVP employs a polyglot persistence approach with a subset of the full database strategy:

| Database | Purpose | Data Types | MVP Status |
|----|---|---|---|
| PostgreSQL | Relational data, user accounts, structured entities | Users, political entities, relationships, configuration | ✅ Included |
| MongoDB | Document storage, social media content | Posts, comments, media items, engagement metrics | ✅ Included |
| Pinecone | Vector embeddings for semantic search | Text embeddings, similarity models | ✅ Included |
| Redis | Caching, real-time operations, task management | Session data, counters, leaderboards, task queues | ❌ **Not in MVP** |

### 4.2 Data Flow Patterns (MVP)

```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│             │     │             │     │             │
│ API Request │────►│ FastAPI     │────►│ PostgreSQL  │
│             │     │ Handler     │     │             │
└─────────────┘     └──────┬──────┘     └─────────────┘
                           │
                           ▼
┌─────────────┐     ┌─────────────┐     
│             │     │             │     
│ Background  │◄────┤ In-Memory   │     
│ Task        │     │ TaskManager │     
│             │     │             │     
└──────┬──────┘     └─────────────┘     
       │
       ▼
┌─────────────┐                  ┌─────────────┐
│             │                  │             │
│ MongoDB     │                  │ Pinecone    │
│ Storage     │                  │ Vectors     │
│             │                  │             │
└─────────────┘                  └─────────────┘
```

## 5. Task Processing Architecture

### 5.1 MVP Implementation

The MVP uses a simplified task processing system:

```
┌─────────────┐     ┌─────────────┐     
│             │     │             │     
│ FastAPI     │────►│ BackgroundTasks  │
│ Backend     │     │ (Built-in)  │     
│             │     │             │     
└─────────────┘     └──────┬──────┘     
                           │
                           ▼
┌─────────────┐     ┌─────────────┐
│             │     │             │
│ TaskManager │────►│ Task        │
│ (In-Memory) │     │ Execution   │
│             │     │             │
└─────────────┘     └─────────────┘
```

#### 5.1.1 MVP Task Manager

```python
class TaskManager:
    """Simple in-memory task management system for MVP."""
    
    def __init__(self):
        self.tasks = {}
        self.status = {}
    
    async def create_task(self, task_type: str, params: dict):
        """Create and track a new task."""
        task_id = str(uuid4())
        self.tasks[task_id] = {
            "type": task_type,
            "params": params,
            "status": "pending",
            "created_at": datetime.utcnow()
        }
        return task_id
    
    async def get_task_status(self, task_id: str):
        """Get the current status of a task."""
        return self.tasks.get(task_id, {}).get("status", "not_found")
```

### 5.2 Future Task Processing (Post-MVP)

The full Celery-based implementation will be added post-MVP:

```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│             │     │             │     │             │
│ FastAPI     │────►│ RabbitMQ    │────►│ Celery      │
│ Backend     │     │ Broker      │     │ Worker      │
│             │     │             │     │             │
└─────────────┘     └─────────────┘     └─────────────┘
       ▲                                        │
       │                                        │
       │           ┌─────────────┐             │
       │           │             │             │
       └───────────┤ Redis       │◄────────────┘
                   │ Results     │
                   │             │
                   └─────────────┘

┌─────────────┐     ┌─────────────┐
│             │     │             │
│ Celery Beat │────►│ Task        │
│ Scheduler   │     │ Schedule    │
│             │     │             │
└─────────────┘     └─────────────┘
```

## 6. Security Architecture

### 6.1 Authentication and Authorization (MVP)

- JWT-based authentication with appropriate expiration
- Role-based access control (RBAC)
- OAuth2 password flow with secure password hashing

### 6.2 Network Security (MVP)

- Traefik as edge gateway with TLS termination
- Internal network isolation
- Minimal port exposure

## 7. Deployment Strategy

### 7.1 MVP Deployment

- **Development**: Docker Compose with override file
- **Production**: Simple Docker Compose deployment
- Scripts for container orchestration and monitoring

### 7.2 Future Deployment Options (Post-MVP)

- Kubernetes migration
- CI/CD pipeline integration
- Horizontal scaling with load balancing

## 8. Monitoring and Observability

### 8.1 MVP Monitoring

- Structured logging format
- Health check endpoints
- Sentry integration for error tracking

### 8.2 Future Monitoring (Post-MVP)

- Prometheus metrics collection
- Grafana dashboards
- Celery Flower for task monitoring
- Log aggregation system

## 9. Development Environment

### 9.1 Local Setup (MVP)

- Simple startup with `docker-compose up`
- Hot-reloading for backend and frontend
- Development admin interfaces for databases
- Standardized environment variables

### 9.2 Testing Infrastructure (MVP)

- Unit tests for all components
- Integration tests for core functionality
- Mock data for social media platform collectors

## Appendix A: Environment Variables (MVP)

| Variable | Purpose | Example |
|----|---|---|
| `DOMAIN` | Base domain for all services | `example.com` |
| `POSTGRES_*` | PostgreSQL configuration | `POSTGRES_USER=postgres` |
| `MONGO_*` | MongoDB configuration | `MONGO_USER=mongo` |
| `SECRET_KEY` | Application encryption key | `supersecretkey` |
| `SENTRY_DSN` | Sentry error tracking | `https://...` |
| `APIFY_API_KEY` | APIFY integration for social media collection | `apify_api_key_123` |

## Appendix B: Network Ports (MVP)

| Service | Port | Purpose |
|---|---|---|
| Traefik | 80, 443 | HTTP/HTTPS |
| PostgreSQL | 5432 | Database access |
| MongoDB | 27017 | Database access |
| FastAPI | 8000 | API access |
| Frontend | 5173 | Web UI (development) |

## Appendix C: MVP vs Future Implementation Summary

| Component | MVP Implementation | Future Implementation |
|---|---|---|
| Frontend | React SPA | Enhanced React SPA |
| Backend | FastAPI | FastAPI with expanded capabilities |
| Task Processing | In-memory TaskManager | Celery, RabbitMQ, Redis |
| Data Storage | PostgreSQL, MongoDB, Pinecone | PostgreSQL, MongoDB, Pinecone, Redis |
| Message Queuing | None | RabbitMQ, Kafka |
| Caching | None | Redis |
| Stream Processing | None | Kafka, Zookeeper |
| Monitoring | Basic logging, Sentry | Prometheus, Grafana, Log aggregation |