---
description: General description of the backend used in the repository. Use this to have more context on the /backend structure.
globs: backend, *.py
alwaysApply: false
---
# Cursor Rules for FastAPI Backend Project

## Project Overview
This is a FastAPI backend project structured with SQLModel for database models, JWT authentication, and a modular architecture. The project uses PostgreSQL for data storage, uv for package management, and follows a clear separation of concerns.

## Key Technologies
- **FastAPI**: Web framework for building APIs
- **SQLModel**: ORM for working with SQL databases 
- **PostgreSQL**: Database backend
- **JWT**: For authentication
- **uv**: For Python package and environment management
- **Alembic**: For database migrations
- **Docker**: For containerization

## Project Structure Rules

### Core Components
- **/app/core/**: Contains core configuration and utilities
  - **config.py**: Centralized configuration using Pydantic settings
  - **security.py**: Authentication and security functions
  - **db.py**: Database engine and initialization

### Models
- **/app/models.py**: All data models are defined using SQLModel
  - Models use UUID fields as primary keys 
  - Relationships are defined with cascading delete behavior
  - Models include clear separation between base, public, and internal models

### API Structure
- **/app/api/**: API route definitions and dependencies
  - **/api/routes/**: Organized by resource (users, items, login, etc.)
  - **/api/deps.py**: Dependency injection for routes

### Authentication
- JWT-based authentication is implemented
- Access tokens expire after configurable time (8 days default)
- Password recovery flow is supported

### Database
- Models are managed via Alembic migrations
- UUIDs are used for all IDs (migrated from integers)
- String fields have explicit max lengths

### Environment
- Environment variables are loaded from .env file
- Development vs production environment settings
- CORS settings for frontend communication

### Email Templates
- Located in **/app/email-templates/**
- Built from MJML source files to HTML

## Development Rules

### Code Patterns
- Use type annotations throughout
- Follow REST principles for API endpoints
- Use dependency injection via FastAPI
- Use SQLModel for database operations 
- Handle errors with proper HTTP status codes

### Testing
- Tests are in **/app/tests/**
- Tests use pytest fixtures for database and client
- Mock external services in tests

### Docker Setup
- Use Docker Compose for local development
- FastAPI run with live reloading during development
- PostgreSQL database runs in a container

## API Response Standards
- Consistent response objects for collections (with count and data fields)
- Use of standard message response objects
- Proper error handling with appropriate status codes

## Security Practices
- Password hashing with bcrypt
- JWT token-based authentication
- Environment-specific secrets management
- CORS configuration for frontend access