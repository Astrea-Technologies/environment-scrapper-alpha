services:

  # Local services are available on their ports, but also available on:
  # http://api.localhost.tiangolo.com: backend
  # http://dashboard.localhost.tiangolo.com: frontend
  # etc. To enable it, update .env, set:
  # DOMAIN=localhost.tiangolo.com
  proxy:
    image: traefik:3.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "8090:8080"
    # Duplicate the command from docker-compose.yml to add --api.insecure=true
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable debug logging for local development
      - --log.level=DEBUG
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      # Dummy https-redirect middleware that doesn't really redirect, only to
      # allow running it locally
      - traefik.http.middlewares.https-redirect.contenttype.autodetect=false
    networks:
      - traefik-public
      - default

  db:
    restart: "no"
    ports:
      - "5432:5432"

  mongodb:
    image: mongo:6
    restart: "no"
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-mongo}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongo}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-political_analysis}
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: "no"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management
    restart: "no"
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:latest
    restart: "no"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka:
    image: bitnami/kafka:3.4
    restart: "no"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper

  mongo-express:
    image: mongo-express
    restart: "no"
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER:-mongo}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD:-mongo}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USER:-mongo}:${MONGO_PASSWORD:-mongo}@mongodb:27017/
    depends_on:
      mongodb:
        condition: service_healthy

  adminer:
    restart: "no"
    ports:
      - "8080:8080"

  backend:
    restart: "no"
    ports:
      - "8000:8000"
    build:
      context: ./backend
    # command: sleep infinity  # Infinite loop to keep container alive doing nothing
    command:
      - fastapi
      - run
      - --reload
      - "app/main.py"
    develop:
      watch:
        - path: ./backend
          action: sync
          target: /app
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild
    # TODO: remove once coverage is done locally
    volumes:
      - ./backend/htmlcov:/app/htmlcov
    environment:
      SMTP_HOST: "mailcatcher"
      SMTP_PORT: "1025"
      SMTP_TLS: "false"
      EMAILS_FROM_EMAIL: "noreply@example.com"
      MONGODB_SERVER: "mongodb"
      MONGODB_PORT: "27017"
      MONGODB_USER: ${MONGO_USER:-mongo}
      MONGODB_PASSWORD: ${MONGO_PASSWORD:-mongo}
      MONGODB_DATABASE: ${MONGODB_DATABASE:-political_analysis}
      REDIS_SERVER: "redis"
      REDIS_PORT: "6379"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    restart: "no"
    command: celery -A app.tasks.celery_app worker --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      MONGODB_SERVER: "mongodb"
      MONGODB_PORT: "27017"
      MONGODB_USER: ${MONGO_USER:-mongo}
      MONGODB_PASSWORD: ${MONGO_PASSWORD:-mongo}
      MONGODB_DATABASE: ${MONGODB_DATABASE:-political_analysis}
      REDIS_SERVER: "redis"
      REDIS_PORT: "6379"
      RABBITMQ_SERVER: "rabbitmq"
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9093,localhost:9092"
      CELERY_BROKER: "amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672//"
    depends_on:
      - backend
      - redis
      - mongodb
      - rabbitmq

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    restart: "no"
    command: celery -A app.tasks.celery_app beat --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      MONGODB_SERVER: "mongodb"
      MONGODB_PORT: "27017"
      MONGODB_USER: ${MONGO_USER:-mongo}
      MONGODB_PASSWORD: ${MONGO_PASSWORD:-mongo}
      MONGODB_DATABASE: ${MONGODB_DATABASE:-political_analysis}
      REDIS_SERVER: "redis"
      REDIS_PORT: "6379"
      RABBITMQ_SERVER: "rabbitmq"
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9093,localhost:9092"
      CELERY_BROKER: "amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672//"
    depends_on:
      - celery-worker

  celery-flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    restart: "no"
    command: celery flower --broker=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672// --port=5555
    ports:
      - "5555:5555"
    environment:
      MONGODB_SERVER: "mongodb"
      MONGODB_PORT: "27017"
      MONGODB_USER: ${MONGO_USER:-mongo}
      MONGODB_PASSWORD: ${MONGO_PASSWORD:-mongo}
      MONGODB_DATABASE: ${MONGODB_DATABASE:-political_analysis}
      REDIS_SERVER: "redis"
      REDIS_PORT: "6379"
      RABBITMQ_SERVER: "rabbitmq"
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}
      CELERY_BROKER: "amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672//"
      PROJECT_NAME: "Political Social Media Analysis Platform"
      POSTGRES_SERVER: "db"
      POSTGRES_PORT: "5432"
      POSTGRES_DB: "app"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      FIRST_SUPERUSER: "admin@example.com"
      FIRST_SUPERUSER_PASSWORD: "password"
    depends_on:
      - celery-worker

  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - "1080:1080"
      - "1025:1025"

  frontend:
    restart: "no"
    ports:
      - "5173:80"
    build:
      context: ./frontend
      args:
        - VITE_API_URL=http://localhost:8000
        - NODE_ENV=development

  playwright:
    build:
      context: ./frontend
      dockerfile: Dockerfile.playwright
      args:
        - VITE_API_URL=http://backend:8000
        - NODE_ENV=production
    ipc: host
    depends_on:
      - backend
      - mailcatcher
    env_file:
      - .env
    environment:
      - VITE_API_URL=http://backend:8000
      - MAILCATCHER_HOST=http://mailcatcher:1080
      # For the reports when run locally
      - PLAYWRIGHT_HTML_HOST=0.0.0.0
      - CI=${CI}
    volumes:
      - ./frontend/blob-report:/app/blob-report
      - ./frontend/test-results:/app/test-results
    ports:
      - 9323:9323

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false

volumes:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  zookeeper_data:
  kafka_data:
